import FreeCAD as App
import numpy as np

hexSeparation = 1
hexExtrusion = -2
hexRadius = 4
planeOffset = -3
userSheetLabel = "EditMe"
autoGeneratedLabel = "AutoGenerated"


class SpreadSheet:
    def __init__(self):
        self.hexSeparation = hexSeparation
        self.hexExtrusion = hexExtrusion
        self.hexRadius = hexRadius
        self.planeOffset = planeOffset
        self.name = userSheetLabel
        self.hexagon = None
        self.aliases = {}

    def create(self, label: str):
        doc = App.ActiveDocument
        if not doc:
            raise RuntimeError("No active FreeCAD document.")
        sheet = doc.getObject(label)
        if sheet is None:
            sheet = doc.addObject("Spreadsheet::Sheet", label)
        sheet.setColumnWidth("A", 150)
        self.set = sheet.set
        self.sheet = sheet
        self.name = label
        return sheet

    def aliase(self, aliases: dict):
        if not self.sheet:
            raise RuntimeError("Sheet not initialized.")
        for alias_name, cell in aliases.items():
            self.sheet.setAlias(cell, alias_name)
        self.aliases = aliases

    def userSpreadSheet(self):
        doc = App.ActiveDocument
        had_autorc = getattr(doc, "AutoRecompute", True)
        if hasattr(doc, "AutoRecompute"):
            doc.AutoRecompute = False
        try:
            sheet = self.create(userSheetLabel)
            setc = self.set

            aliases = {
                "radius": "B2",
                "separation": "B3",
                "height": "B6",
                "planeOffset": "B7",
            }
            self.aliase(aliases)

            setc("A1", "User Variables")
            setc("A2", "Hexagon Radius:")
            setc(aliases["radius"], str(self.hexRadius))
            setc("A3", "Hexagon Separation:")
            setc(aliases["separation"], str(self.hexSeparation))
            setc("A6", "Grid Height:")
            setc(aliases["height"], str(self.hexExtrusion))
            setc("A7", "Plane Offset:")
            setc(aliases["planeOffset"], str(planeOffset))
        finally:
            if hasattr(doc, "AutoRecompute"):
                doc.AutoRecompute = had_autorc
        doc.recompute()
        return sheet

    def orientedBoundBox(self, offset2D):
        pts = np.array([[v.X, v.Y, v.Z] for v in offset2D.Shape.Vertexes])

        face = offset2D.Shape.Faces[0]
        normal = face.normalAt(0, 0)

        u = normal.cross(App.Vector(0, 0, 1))
        if u.Length == 0:
            u = App.Vector(1, 0, 0)
        v = normal.cross(u)
        u.normalize()
        v.normalize()

        coords2D = [(p.dot(u), p.dot(v)) for p in map(App.Vector, pts)]

        xs = [c[0] for c in coords2D]
        ys = [c[1] for c in coords2D]
        width = max(xs) - min(xs)
        height = max(ys) - min(ys)
        return max(width, height)

    def compute(self, offset2D):
        doc = App.ActiveDocument
        had_autorc = getattr(doc, "AutoRecompute", True)
        if hasattr(doc, "AutoRecompute"):
            doc.AutoRecompute = False
        try:
            sheet = self.create(autoGeneratedLabel)
            setc = self.set

            aliases = {
                "radius": "B2",
                "separation": "B3",
                "height": "B6",
                "planeOffset": "B7",
                "width": "B4",
                "length": "B5",
                "tweakX": "B8",
                "tweakY": "B9",
                "tweakZ": "B10",
                "xInterval": "E2",
                "yInterval": "E3",
                "firstX": "E4",
                "firstY": "E5",
                "countX": "E6",
                "countY": "E7",
                "array2XPos": "E8",
                "array2YPos": "E9",
            }
            self.aliase(aliases)

            setc("A1", "Auto-Generated Variables")
            setc("D1", "Calculated Values")
            setc("A2", "Hexagon Radius:")
            setc(aliases["radius"], f"={userSheetLabel}.radius")
            setc("A3", "Hexagon Separation:")
            setc(aliases["separation"], f"={userSheetLabel}.separation")
            setc("A6", "Grid Height:")
            setc(aliases["height"], f"={userSheetLabel}.height")

            width = self.orientedBoundBox(offset2D)
            length = width

            setc("A4", "Grid Width:")
            setc(aliases["width"], str(width))
            setc("A5", "Grid Length:")
            setc(aliases["length"], str(length))
            setc("A8", "Tweak X:")
            setc(aliases["tweakX"], "0")
            setc("A9", "Tweak Y:")
            setc(aliases["tweakY"], "0")
            setc("A10", "Tweak Z:")
            setc(aliases["tweakZ"], "0")

            setc("D2", "X Interval:")
            setc(aliases["xInterval"], "=2*sin(60 deg)*(B2*2 + (B3 - 0.267949*B2))")
            setc("D3", "Y Interval:")
            setc(aliases["yInterval"], "=2*B2 + (B3 - 0.267949*B2)")
            setc("D4", "First X:")
            setc(aliases["firstX"], "0")
            setc("D5", "First Y:")
            setc(aliases["firstY"], "0")
            setc("D6", "Count X:")
            setc(aliases["countX"], "=round(B5 / E2) + 2")
            setc("D7", "Count Y:")
            setc(aliases["countY"], "=round(B4 / E3) + 2")
            setc("D8", "Array2 XPos:")
            setc(aliases["array2XPos"], "=sin(60 deg)*(B2*2 + B3 - 0.267949*B2)")
            setc("D9", "Array2 YPos:")
            setc(aliases["array2YPos"], "=E3/2")
        finally:
            if hasattr(doc, "AutoRecompute"):
                doc.AutoRecompute = had_autorc
        doc.recompute()
        return sheet

    def write(self):
        if not self.sheet:
            raise RuntimeError(
                "No sheet to write to. Call userSpreadSheet() or compute() first."
            )
        App.ActiveDocument.recompute()
        return self.sheet
