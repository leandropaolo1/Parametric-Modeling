import Libraries001.Folders as Folders
import Libraries001.Planes as Planes
import Libraries001.Patterns as Patterns
import Libraries001.Spreadsheets as SpreadSheet

from PySide import QtCore
import FreeCADGui as Gui
import FreeCAD as App
import importlib

importlib.reload(Folders)
importlib.reload(Planes)
importlib.reload(Patterns)
importlib.reload(SpreadSheet)


hexSeparation       = .2
hexExtrusion        = -2
hexRadius           = 2
planeOffset         = -3
userSheetLabel      = 'EditMe'
autoGeneratedLabel  = 'AutoGenerated'


def delete_after_delay(objs, delay_ms=10000):
    """Delete the given objects after delay_ms milliseconds."""
    def _delete():
        doc = App.ActiveDocument
        for obj in objs:
            try:
                if obj and obj in doc.Objects:
                    doc.removeObject(obj.Name)
            except Exception:
                pass
        doc.recompute()
    QtCore.QTimer.singleShot(delay_ms, _delete)


def main():
    # 1) Build user spreadsheet and binder
    sheet = SpreadSheet.SpreadSheet()
    userSpreadsheet = sheet.userSpreadSheet()

    plane = Planes.Plane()
    binder = plane.createShapeBinder()

    # 2) Offsets and extrusions
    offset2D_a = plane.createOffset2D(binder)
    offset2D_b = plane.createOffset2D(binder)

    plane.align(binder, offset2D_a)
    plane.align(binder, offset2D_b)

    #extrusion_a = plane.extrude(offset2D_a, spreadsheet=userSpreadsheet)
    #extrusion_b = plane.extrude(offset2D_b, spreadsheet=userSpreadsheet)

    # 3) Auto sheet + hex pattern
    autoGeneratedSpreadsheet = sheet.compute(offset2D=offset2D_a)

    hexagons = Patterns.ShapePattern(
        userSheet=userSpreadsheet,
        autoGeneratedSheet=autoGeneratedSpreadsheet,
        offset2D=offset2D_a,
        type='hexagons'
    )

    hexagons.create()
    #hexagons.align(binder)
    """
    fused = hexagons.extrude()

    cutA = plane.doc.addObject('Part::Cut', 'Cut_OffsetA_minus_Hexagons')
    cutA.Base = extrusion_a
    cutA.Tool = fused

    cutB = plane.doc.addObject('Part::Cut', 'Cut_OffsetB_minus_Body')
    cutB.Base = plane.body
    cutB.Tool = extrusion_b

    
    """
    plane.doc.recompute()
    Gui.SendMsgToActiveView("ViewFit")


if __name__ == "__main__":
    main()
