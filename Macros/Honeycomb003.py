from Libraries.ShapePatterns import ShapePattern
from Libraries.Spreadsheets import SpreadSheet
from Libraries.Folders import Folders
from Libraries.Planes import Plane
from PySide import QtCore
import FreeCADGui as Gui
import FreeCAD as App

hexSeparation       = .2
hexExtrusion        = -2
hexRadius           = 2
planeOffset         = -3
userSheetLabel      = 'EditMe'
autoGeneratedLabel  = 'AutoGenerated'



def delete_after_delay(objs, delay_ms=10000):
    """Delete the given objects after delay_ms milliseconds."""
    def _delete():
        doc = App.ActiveDocument
        for obj in objs:
            try:
                if obj and obj in doc.Objects:
                    doc.removeObject(obj.Name)
            except Exception as e:
                print(f"Could not delete {obj.Name}: {e}")
        doc.recompute()
    QtCore.QTimer.singleShot(delay_ms, _delete)


def main():
    
    
    # 1) Build user spreadsheet and binder
    sheet = SpreadSheet()
    userSpreadsheet = sheet.userSpreadSheet()
    plane = Plane()
    binder = plane.createShapeBinder()

    # 2) Offsets and extrusions
    offset2D_a = plane.createOffset2D(binder)
    offset2D_b = plane.createOffset2D(binder)
    plane.align(binder, offset2D_a)
    plane.align(binder, offset2D_b)

    """
    extrusion_a = plane.extrude(offset2D_a, spreadsheet=userSpreadsheet)
    extrusion_b = plane.extrude(offset2D_b, spreadsheet=userSpreadsheet)

    """

    # 3) Auto sheet + hex pattern
    autoGeneratedSpreadsheet = sheet.computingSpreadSheet(offset2D=offset2D_a)
    hexagons = ShapePattern(userSheet=userSpreadsheet,
                            autoGeneratedSheet=autoGeneratedSpreadsheet,
                            offset2D=offset2D_a,
                            type='hexagons')

    hexagons.create()
    hexagons.extrude(10)
    hexagons.align(binder)



    plane.doc.recompute()
    Gui.SendMsgToActiveView("ViewFit")

    """
    cutA = plane.doc.addObject('Part::Cut', 'Cut_OffsetA_minus_Hexagons')
    cutA.Base = extrusion_a
    cutA.Tool = fused

    cutB = plane.doc.addObject('Part::Cut', 'Cut_OffsetB_minus_Body')
    cutB.Base = plane.body
    cutB.Tool = extrusion_b

    # --- cleanup after 10 sec ---
    delete_after_delay(
        [offset2D_a, offset2D_b,
         extrusion_a, extrusion_b,
         row1, row2, compound,
         cutA, cutB],
        delay_ms=20000
    )
    """

if __name__ == "__main__":
    main()
