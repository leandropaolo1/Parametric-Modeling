import FreeCAD as App
import FreeCADGui as Gui

hexSeparation = 0.2
hexExtrusion = -2
hexRadius = 2
planeOffset = -3
userSheetLabel = "EditMe"
autoGeneratedLabel = "AutoGenerated"


class Plane:
    def __init__(self):
        pass

    def createShapeBinder(self):
        sel_ex = Gui.Selection.getSelectionEx()
        if not sel_ex or not sel_ex[0].SubElementNames:
            raise Exception("Error: Select a face to create the honeycomb grid on.")

        self.doc = App.ActiveDocument
        sel = sel_ex[0]
        src_obj = sel.Object
        subname = sel.SubElementNames[0]

        def findBody(o):
            visited = set()
            queue = list(getattr(o, "InList", []))
            while queue:
                p = queue.pop(0)
                if p in visited:
                    continue
                visited.add(p)
                if getattr(p, "TypeId", "") == "PartDesign::Body":
                    return p
                # keep walking upward
                queue.extend(getattr(p, "InList", []))
            return None

        body = findBody(src_obj)
        self.body = body

        if body:
            binder = body.newObject("PartDesign::SubShapeBinder", "Binder")
        else:
            binder = self.doc.addObject("PartDesign::SubShapeBinder", "Binder")

        binder.Support = [(src_obj, subname)]
        binder.ViewObject.Visibility = False

        self.doc.recompute()
        return binder

    def createOffset2D(self, subShapeBinder):
        offset2D = App.activeDocument().addObject("Part::Offset2D", "Offset2D")
        offset2D.Source = subShapeBinder
        offset2D.setExpression("Value", f"{userSheetLabel}.planeOffset")
        App.activeDocument().recompute()
        offset2D.ViewObject.Visibility = False
        return offset2D

    def extrude(self, shape, length=None, spreadsheet=None):
        print(type(spreadsheet))

        extrusion = App.ActiveDocument.addObject("Part::Extrusion", "Extruded")
        extrusion.Base = shape
        extrusion.DirMode = "Normal"
        extrusion.Solid = True

        if length:
            L = float(length) if hasattr(length, "Value") else float(length)
            extrusion.LengthFwd = L if L > 0 else 0
            extrusion.LengthRev = -L if L < 0 else 0
            return

        length = float(spreadsheet.height)  # type: ignore
        sheet_label = spreadsheet.Name  # type: ignore
        expr_mm = f"({sheet_label}.height * 1 mm)"
        extrusion.setExpression("LengthFwd", f"max({expr_mm}, 0 mm)")
        extrusion.setExpression("LengthRev", f"max(-{expr_mm}, 0 mm)")
        return extrusion

    def align(self, reference, target):
        referenceRotation = self.getGlobalRotation(reference)
        targetRotation = self.getGlobalRotation(target)
        deltaRotation = self.getDeltaRotation(referenceRotation, targetRotation)
        target.Placement.Rotation = referenceRotation

    @staticmethod
    def getGlobalRotation(plane):
        globalRotation = getattr(plane, "getGlobalPlacement", None)
        if callable(globalRotation):
            return globalRotation().Rotation  # type: ignore
        return plane.Placement.Rotation

    @staticmethod
    def getDeltaRotation(reference, target):
        baseRotation = App.Rotation(reference)
        baseRotation.invert()
        return baseRotation.multiply(target)
